
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000838  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000e6  008000e6  00000952  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b5  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e9  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d9  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062a  00000000  00000000  00001449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000106  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__vector_10>
  16:	9c c0       	rjmp	.+312    	; 0x150 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e3       	ldi	r30, 0x38	; 56
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 3e       	cpi	r26, 0xE6	; 230
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a6 ee       	ldi	r26, 0xE6	; 230
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 30       	cpi	r26, 0x06	; 6
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6e d0       	rcall	.+220    	; 0x136 <main>
  5a:	ec c3       	rjmp	.+2008   	; 0x834 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_10>:
uint8_t start[]="Started...\r\n";

uint8_t input_buffer[20]={0};

ISR(SPI_STC_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	ef 93       	push	r30
  6e:	ff 93       	push	r31
	gPointer++;
  70:	e0 91 02 01 	lds	r30, 0x0102
  74:	f0 91 03 01 	lds	r31, 0x0103
  78:	31 96       	adiw	r30, 0x01	; 1
  7a:	f0 93 03 01 	sts	0x0103, r31
  7e:	e0 93 02 01 	sts	0x0102, r30
  82:	31 97       	sbiw	r30, 0x01	; 1
	gCounter--;	
  84:	80 91 ff 00 	lds	r24, 0x00FF
  88:	90 91 00 01 	lds	r25, 0x0100
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	90 93 00 01 	sts	0x0100, r25
  92:	80 93 ff 00 	sts	0x00FF, r24
	if (gCounter==0) SPCR^=(1<<SPIE); //отключаем прерывание по завешению
  96:	89 2b       	or	r24, r25
  98:	19 f4       	brne	.+6      	; 0xa0 <__vector_10+0x42>
  9a:	8d b1       	in	r24, 0x0d	; 13
  9c:	80 58       	subi	r24, 0x80	; 128
  9e:	8d b9       	out	0x0d, r24	; 13
	SPDR=*(gPointer);
  a0:	81 81       	ldd	r24, Z+1	; 0x01
  a2:	8f b9       	out	0x0f, r24	; 15
}
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_6>:

ISR(TIMER1_COMPA_vect)	//формирование тактовых сигналов 1 √ц, 10 √ц и 100 √ц на выводах PCO, PC1 и PC2 
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	
	static uint8_t div10=0;		//делитель на 10 дл€ получени€ 100 √ц
	static uint8_t div100=0;	//делитель на 100 дл€ получени€ 10 √ц
	static uint16_t div1000=0;	//делитель на 1000 дл€ получени€ 1 √ц
	
	TCNT1H=0;
  c6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0;
  c8:	1c bc       	out	0x2c, r1	; 44
		
	div1000++;	
  ca:	80 91 fb 00 	lds	r24, 0x00FB
  ce:	90 91 fc 00 	lds	r25, 0x00FC
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 fc 00 	sts	0x00FC, r25
  d8:	80 93 fb 00 	sts	0x00FB, r24
	if (div1000==1000) 
  dc:	88 5e       	subi	r24, 0xE8	; 232
  de:	93 40       	sbci	r25, 0x03	; 3
  e0:	41 f4       	brne	.+16     	; 0xf2 <__vector_6+0x3c>
		{	
			PORTC^=(1<<PC0);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	89 27       	eor	r24, r25
  e8:	85 bb       	out	0x15, r24	; 21
			div1000=0;
  ea:	10 92 fc 00 	sts	0x00FC, r1
  ee:	10 92 fb 00 	sts	0x00FB, r1
		}
	
	div100++;	
  f2:	80 91 fd 00 	lds	r24, 0x00FD
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 fd 00 	sts	0x00FD, r24
	if (div100==100) 
  fc:	84 36       	cpi	r24, 0x64	; 100
  fe:	31 f4       	brne	.+12     	; 0x10c <__vector_6+0x56>
		{	
			PORTC^=(1<<PC1);
 100:	85 b3       	in	r24, 0x15	; 21
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	89 27       	eor	r24, r25
 106:	85 bb       	out	0x15, r24	; 21
			div100=0;
 108:	10 92 fd 00 	sts	0x00FD, r1
		}
	
	div10++;
 10c:	80 91 fe 00 	lds	r24, 0x00FE
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 fe 00 	sts	0x00FE, r24
	if (div10==10) 
 116:	8a 30       	cpi	r24, 0x0A	; 10
 118:	31 f4       	brne	.+12     	; 0x126 <__vector_6+0x70>
		{	
			PORTC^=(1<<PC2);
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	89 27       	eor	r24, r25
 120:	85 bb       	out	0x15, r24	; 21
			div10=0;
 122:	10 92 fe 00 	sts	0x00FE, r1
		}
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:


int main (void)
{
	
	DDRC=0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	84 bb       	out	0x14, r24	; 20
	DDRB|=(1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8f 6e       	ori	r24, 0xEF	; 239
 13e:	87 bb       	out	0x17, r24	; 23
	
	usart_init();
 140:	8f d0       	rcall	.+286    	; 0x260 <usart_init>
	send_string(start);
 142:	82 e7       	ldi	r24, 0x72	; 114
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	92 d0       	rcall	.+292    	; 0x26c <send_string>

	SREG=(1<<7); //глобальное разрешение прерываний
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	8f bf       	out	0x3f, r24	; 63
	
	spi_init();
 14c:	78 d0       	rcall	.+240    	; 0x23e <spi_init>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x18>

00000150 <__vector_11>:
			div10=0;
		}
}

ISR(USART_RXC_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	62 97       	sbiw	r28, 0x12	; 18
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61
	static uint8_t ptr=0;
	
	uint8_t OK[]="OK\r\n";
	uint8_t Err[]="Error data\r\n";
	
	rxbyte = UDR;
 180:	9c b1       	in	r25, 0x0c	; 12
	
	switch (rxbyte)
 182:	90 32       	cpi	r25, 0x20	; 32
 184:	09 f4       	brne	.+2      	; 0x188 <__vector_11+0x38>
 186:	45 c0       	rjmp	.+138    	; 0x212 <__vector_11+0xc2>
 188:	91 32       	cpi	r25, 0x21	; 33
 18a:	18 f4       	brcc	.+6      	; 0x192 <__vector_11+0x42>
 18c:	9d 30       	cpi	r25, 0x0D	; 13
 18e:	b9 f5       	brne	.+110    	; 0x1fe <__vector_11+0xae>
 190:	05 c0       	rjmp	.+10     	; 0x19c <__vector_11+0x4c>
 192:	9b 32       	cpi	r25, 0x2B	; 43
 194:	51 f1       	breq	.+84     	; 0x1ea <__vector_11+0x9a>
 196:	9d 32       	cpi	r25, 0x2D	; 45
 198:	91 f5       	brne	.+100    	; 0x1fe <__vector_11+0xae>
 19a:	2b c0       	rjmp	.+86     	; 0x1f2 <__vector_11+0xa2>
{
	uint8_t rxbyte;
	static uint8_t ptr=0;
	
	uint8_t OK[]="OK\r\n";
	uint8_t Err[]="Error data\r\n";
 19c:	de 01       	movw	r26, r28
 19e:	16 96       	adiw	r26, 0x06	; 6
 1a0:	e0 e6       	ldi	r30, 0x60	; 96
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <__vector_11+0x56>
ISR(USART_RXC_vect)
{
	uint8_t rxbyte;
	static uint8_t ptr=0;
	
	uint8_t OK[]="OK\r\n";
 1ae:	de 01       	movw	r26, r28
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	ed e6       	ldi	r30, 0x6D	; 109
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	01 90       	ld	r0, Z+
 1ba:	0d 92       	st	X+, r0
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <__vector_11+0x68>
	switch (rxbyte)
	
	{		
		case 0x0D: 	//Enter - признак окончани€ ввода команды
				{ 	
					if(command_processing(input_buffer)) send_string(OK);
 1c0:	86 ee       	ldi	r24, 0xE6	; 230
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	5d d0       	rcall	.+186    	; 0x280 <command_processing>
 1c6:	88 23       	and	r24, r24
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <__vector_11+0x80>
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_11+0x84>
					else send_string(Err);
 1d0:	ce 01       	movw	r24, r28
 1d2:	06 96       	adiw	r24, 0x06	; 6
 1d4:	4b d0       	rcall	.+150    	; 0x26c <send_string>
					memset(input_buffer,0,20);
 1d6:	84 e1       	ldi	r24, 0x14	; 20
 1d8:	e6 ee       	ldi	r30, 0xE6	; 230
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	df 01       	movw	r26, r30
 1de:	1d 92       	st	X+, r1
 1e0:	8a 95       	dec	r24
 1e2:	e9 f7       	brne	.-6      	; 0x1de <__vector_11+0x8e>
					ptr=0;
 1e4:	10 92 fa 00 	sts	0x00FA, r1
 1e8:	14 c0       	rjmp	.+40     	; 0x212 <__vector_11+0xc2>
					break;
				}
				
		case '+': //уменьшаем скважность Ў»ћ (увеличиваем заполнение)
				{
					 OCR1A+=10;
 1ea:	8a b5       	in	r24, 0x2a	; 42
 1ec:	9b b5       	in	r25, 0x2b	; 43
 1ee:	0a 96       	adiw	r24, 0x0a	; 10
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <__vector_11+0xa8>
					 break;
				}
				
		case '-': //увеличиваем скважность Ў»ћ (уменьшаем заполнение)
				{
					 OCR1A-=10;
 1f2:	8a b5       	in	r24, 0x2a	; 42
 1f4:	9b b5       	in	r25, 0x2b	; 43
 1f6:	0a 97       	sbiw	r24, 0x0a	; 10
 1f8:	9b bd       	out	0x2b, r25	; 43
 1fa:	8a bd       	out	0x2a, r24	; 42
 1fc:	0a c0       	rjmp	.+20     	; 0x212 <__vector_11+0xc2>
		case 0x20: break; //пропускаем пробелы
				
				
		default: //заполн€ем буфер входных данных
				{
					input_buffer[ptr]=rxbyte;
 1fe:	80 91 fa 00 	lds	r24, 0x00FA
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ea 51       	subi	r30, 0x1A	; 26
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	90 83       	st	Z, r25
					ptr++;
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 fa 00 	sts	0x00FA, r24
				}
	}
	
}
 212:	62 96       	adiw	r28, 0x12	; 18
 214:	de bf       	out	0x3e, r29	; 62
 216:	cd bf       	out	0x3d, r28	; 61
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <spi_init>:
#include "spi.h"

void spi_init(void)  //настройка SPI
{
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //включение SPI, режим мастер, тактова€ частота SPI=8000000/18=500  √ц
 23e:	8d b1       	in	r24, 0x0d	; 13
 240:	81 65       	ori	r24, 0x51	; 81
 242:	8d b9       	out	0x0d, r24	; 13
}
 244:	08 95       	ret

00000246 <spi_send_buffer>:


void spi_send_buffer(uint8_t *p, uint16_t size) //неблокирующа€ отправка данных, отправл€ем в SPI передатчик первый байт, остальные отправл€ютс€ обработчиком прерывани€ по завершению передачи 
{
 246:	fc 01       	movw	r30, r24
	SPCR|=(1<<SPIE); //разрешение прерывани€ по завершению передачи байта
 248:	6f 9a       	sbi	0x0d, 7	; 13
	gPointer=p;
 24a:	90 93 03 01 	sts	0x0103, r25
 24e:	80 93 02 01 	sts	0x0102, r24
	gCounter=size;
 252:	70 93 00 01 	sts	0x0100, r23
 256:	60 93 ff 00 	sts	0x00FF, r22
	SPDR = *gPointer;
 25a:	80 81       	ld	r24, Z
 25c:	8f b9       	out	0x0f, r24	; 15
}
 25e:	08 95       	ret

00000260 <usart_init>:
#include "uart.h"

void usart_init(void)
{
	UCSRB= (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); ; //разрешить прием, передачу и прерывание по приему байта
 260:	88 e9       	ldi	r24, 0x98	; 152
 262:	8a b9       	out	0x0a, r24	; 10
	UBRRH=0;
 264:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//Baud rate = 9600
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	89 b9       	out	0x09, r24	; 9
}
 26a:	08 95       	ret

0000026c <send_string>:

void send_string(uint8_t* bptr) //функци€ отправки данных через терминал
{
 26c:	fc 01       	movw	r30, r24
 26e:	04 c0       	rjmp	.+8      	; 0x278 <send_string+0xc>
		
	while(*bptr!='\0')
		{
			UDR=*bptr;
 270:	8c b9       	out	0x0c, r24	; 12
			while(!(UCSRA&(1<<UDRE))); //ожидаем окончание передачи байта
 272:	5d 9b       	sbis	0x0b, 5	; 11
 274:	fe cf       	rjmp	.-4      	; 0x272 <send_string+0x6>
			bptr++;
 276:	31 96       	adiw	r30, 0x01	; 1
}

void send_string(uint8_t* bptr) //функци€ отправки данных через терминал
{
		
	while(*bptr!='\0')
 278:	80 81       	ld	r24, Z
 27a:	88 23       	and	r24, r24
 27c:	c9 f7       	brne	.-14     	; 0x270 <send_string+0x4>
		{
			UDR=*bptr;
			while(!(UCSRA&(1<<UDRE))); //ожидаем окончание передачи байта
			bptr++;
		}
}
 27e:	08 95       	ret

00000280 <command_processing>:

uint8_t command_processing(uint8_t* inbuf)
{
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	1f 93       	push	r17
 286:	df 93       	push	r29
 288:	cf 93       	push	r28
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	c7 56       	subi	r28, 0x67	; 103
 290:	d0 40       	sbci	r29, 0x00	; 0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	7c 01       	movw	r14, r24
	uint8_t	osc1[]="oscmode1";
 29e:	de 01       	movw	r26, r28
 2a0:	98 96       	adiw	r26, 0x28	; 40
 2a2:	ef e7       	ldi	r30, 0x7F	; 127
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	89 e0       	ldi	r24, 0x09	; 9
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	81 50       	subi	r24, 0x01	; 1
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <command_processing+0x28>
	uint8_t osc2[]="oscmode2";
 2b0:	de 01       	movw	r26, r28
 2b2:	d1 96       	adiw	r26, 0x31	; 49
 2b4:	e8 e8       	ldi	r30, 0x88	; 136
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	89 e0       	ldi	r24, 0x09	; 9
 2ba:	01 90       	ld	r0, Z+
 2bc:	0d 92       	st	X+, r0
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <command_processing+0x3a>
	uint8_t oscstop[]="oscstop";
 2c2:	de 01       	movw	r26, r28
 2c4:	50 96       	adiw	r26, 0x10	; 16
 2c6:	e1 e9       	ldi	r30, 0x91	; 145
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <command_processing+0x4c>
	uint8_t pb[]="portb";
 2d4:	de 01       	movw	r26, r28
 2d6:	14 96       	adiw	r26, 0x04	; 4
 2d8:	e9 e9       	ldi	r30, 0x99	; 153
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	01 90       	ld	r0, Z+
 2e0:	0d 92       	st	X+, r0
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	e1 f7       	brne	.-8      	; 0x2de <command_processing+0x5e>
	uint8_t pc[]="portc";
 2e6:	de 01       	movw	r26, r28
 2e8:	1a 96       	adiw	r26, 0x0a	; 10
 2ea:	ef e9       	ldi	r30, 0x9F	; 159
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	01 90       	ld	r0, Z+
 2f2:	0d 92       	st	X+, r0
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <command_processing+0x70>
	uint8_t spibyte[]="spibyte";
 2f8:	de 01       	movw	r26, r28
 2fa:	58 96       	adiw	r26, 0x18	; 24
 2fc:	e5 ea       	ldi	r30, 0xA5	; 165
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	88 e0       	ldi	r24, 0x08	; 8
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	81 50       	subi	r24, 0x01	; 1
 308:	e1 f7       	brne	.-8      	; 0x302 <command_processing+0x82>
	uint8_t spibuff[]="spibuff";
 30a:	de 01       	movw	r26, r28
 30c:	90 96       	adiw	r26, 0x20	; 32
 30e:	ed ea       	ldi	r30, 0xAD	; 173
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	01 90       	ld	r0, Z+
 316:	0d 92       	st	X+, r0
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	e1 f7       	brne	.-8      	; 0x314 <command_processing+0x94>
	uint8_t answer[]="SPI answer: ";
 31c:	de 01       	movw	r26, r28
 31e:	da 96       	adiw	r26, 0x3a	; 58
 320:	e5 eb       	ldi	r30, 0xB5	; 181
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	81 50       	subi	r24, 0x01	; 1
 32c:	e1 f7       	brne	.-8      	; 0x326 <command_processing+0xa6>
	uint8_t rn[]="\r\n";
 32e:	de 01       	movw	r26, r28
 330:	11 96       	adiw	r26, 0x01	; 1
 332:	e2 ec       	ldi	r30, 0xC2	; 194
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	e1 f7       	brne	.-8      	; 0x338 <command_processing+0xb8>
	uint8_t spitx[]="A change is as good as a rest...";
 340:	de 01       	movw	r26, r28
 342:	a9 5b       	subi	r26, 0xB9	; 185
 344:	bf 4f       	sbci	r27, 0xFF	; 255
 346:	e5 ec       	ldi	r30, 0xC5	; 197
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	81 e2       	ldi	r24, 0x21	; 33
 34c:	01 90       	ld	r0, Z+
 34e:	0d 92       	st	X+, r0
 350:	81 50       	subi	r24, 0x01	; 1
 352:	e1 f7       	brne	.-8      	; 0x34c <command_processing+0xcc>
	
	uint8_t i,pin,status=0;
		
	if(memcmp(inbuf,osc1,8)==0) 	
 354:	c7 01       	movw	r24, r14
 356:	be 01       	movw	r22, r28
 358:	68 5d       	subi	r22, 0xD8	; 216
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	48 e0       	ldi	r20, 0x08	; 8
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	e1 d1       	rcall	.+962    	; 0x724 <memcmp>
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	11 f0       	breq	.+4      	; 0x36a <command_processing+0xea>
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	03 c0       	rjmp	.+6      	; 0x370 <command_processing+0xf0>
						{
							timer_stop();
 36a:	d5 d0       	rcall	.+426    	; 0x516 <timer_stop>
							tim_3x_start(); 
 36c:	be d0       	rcall	.+380    	; 0x4ea <tim_3x_start>
 36e:	11 e0       	ldi	r17, 0x01	; 1
							status=1;
						}
							
	if(memcmp(inbuf,osc2,8)==0) 	
 370:	c7 01       	movw	r24, r14
 372:	be 01       	movw	r22, r28
 374:	6f 5c       	subi	r22, 0xCF	; 207
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	48 e0       	ldi	r20, 0x08	; 8
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	d3 d1       	rcall	.+934    	; 0x724 <memcmp>
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	19 f4       	brne	.+6      	; 0x388 <command_processing+0x108>
						{
							timer_stop();
 382:	c9 d0       	rcall	.+402    	; 0x516 <timer_stop>
							tim_pwm_start(); 
 384:	bd d0       	rcall	.+378    	; 0x500 <tim_pwm_start>
 386:	11 e0       	ldi	r17, 0x01	; 1
							status=1;
						}
	
	if(memcmp(inbuf,oscstop,7)==0)	
 388:	c7 01       	movw	r24, r14
 38a:	be 01       	movw	r22, r28
 38c:	60 5f       	subi	r22, 0xF0	; 240
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	47 e0       	ldi	r20, 0x07	; 7
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	c7 d1       	rcall	.+910    	; 0x724 <memcmp>
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	11 f4       	brne	.+4      	; 0x39e <command_processing+0x11e>
						{
							timer_stop(); 
 39a:	bd d0       	rcall	.+378    	; 0x516 <timer_stop>
 39c:	11 e0       	ldi	r17, 0x01	; 1
							status=1;
						}
						
	if(memcmp(inbuf,pb,5)==0)
 39e:	c7 01       	movw	r24, r14
 3a0:	be 01       	movw	r22, r28
 3a2:	6c 5f       	subi	r22, 0xFC	; 252
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	45 e0       	ldi	r20, 0x05	; 5
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	bc d1       	rcall	.+888    	; 0x724 <memcmp>
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	61 f5       	brne	.+88     	; 0x408 <command_processing+0x188>
						{
							pin=strtoul((char*)(inbuf+5),0,10); //находим номер вывода ћ 
 3b0:	c7 01       	movw	r24, r14
 3b2:	05 96       	adiw	r24, 0x05	; 5
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	4a e0       	ldi	r20, 0x0A	; 10
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	b2 d0       	rcall	.+356    	; 0x522 <strtoul>
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <command_processing+0x144>
							i=0;
							
							while(inbuf[i+1]!='\0') i++;
 3c2:	9f 5f       	subi	r25, 0xFF	; 255
 3c4:	f7 01       	movw	r30, r14
 3c6:	e9 0f       	add	r30, r25
 3c8:	f1 1d       	adc	r31, r1
 3ca:	81 81       	ldd	r24, Z+1	; 0x01
 3cc:	88 23       	and	r24, r24
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <command_processing+0x142>
							
							if (inbuf[i]=='h')	
 3d0:	80 81       	ld	r24, Z
 3d2:	88 36       	cpi	r24, 0x68	; 104
 3d4:	59 f4       	brne	.+22     	; 0x3ec <command_processing+0x16c>
 
											{
												PORTB|=(1<<pin);
 3d6:	28 b3       	in	r18, 0x18	; 24
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <command_processing+0x162>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <command_processing+0x15e>
 3e6:	28 2b       	or	r18, r24
 3e8:	28 bb       	out	0x18, r18	; 24
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <command_processing+0x186>
												status=1;
											}
							
							if (inbuf[i]=='l')
 3ec:	8c 36       	cpi	r24, 0x6C	; 108
 3ee:	61 f4       	brne	.+24     	; 0x408 <command_processing+0x188>
											{
												PORTB&=~(1<<pin);
 3f0:	28 b3       	in	r18, 0x18	; 24
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <command_processing+0x17c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <command_processing+0x178>
 400:	80 95       	com	r24
 402:	82 23       	and	r24, r18
 404:	88 bb       	out	0x18, r24	; 24
 406:	11 e0       	ldi	r17, 0x01	; 1
												status=1;
											}
						}
	
	if(memcmp(inbuf,pc,5)==0)
 408:	c7 01       	movw	r24, r14
 40a:	be 01       	movw	r22, r28
 40c:	66 5f       	subi	r22, 0xF6	; 246
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	45 e0       	ldi	r20, 0x05	; 5
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	87 d1       	rcall	.+782    	; 0x724 <memcmp>
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	61 f5       	brne	.+88     	; 0x472 <__stack+0x13>
						{
							pin=strtoul((char*)(inbuf+5),0,10);	//находим номер вывода ћ 
 41a:	c7 01       	movw	r24, r14
 41c:	05 96       	adiw	r24, 0x05	; 5
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	7d d0       	rcall	.+250    	; 0x522 <strtoul>
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	01 c0       	rjmp	.+2      	; 0x42e <command_processing+0x1ae>
														
							i=0;
							while(inbuf[i+1]!='\0') i++;
 42c:	9f 5f       	subi	r25, 0xFF	; 255
 42e:	f7 01       	movw	r30, r14
 430:	e9 0f       	add	r30, r25
 432:	f1 1d       	adc	r31, r1
 434:	81 81       	ldd	r24, Z+1	; 0x01
 436:	88 23       	and	r24, r24
 438:	c9 f7       	brne	.-14     	; 0x42c <command_processing+0x1ac>
																					
							if (inbuf[i]=='h')
 43a:	80 81       	ld	r24, Z
 43c:	88 36       	cpi	r24, 0x68	; 104
 43e:	59 f4       	brne	.+22     	; 0x456 <command_processing+0x1d6>
												{
													PORTC|=(1<<pin);
 440:	25 b3       	in	r18, 0x15	; 21
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <command_processing+0x1cc>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <command_processing+0x1c8>
 450:	28 2b       	or	r18, r24
 452:	25 bb       	out	0x15, r18	; 21
 454:	0d c0       	rjmp	.+26     	; 0x470 <__stack+0x11>
													status=1;
												}
							if (inbuf[i]=='l')
 456:	8c 36       	cpi	r24, 0x6C	; 108
 458:	59 f4       	brne	.+22     	; 0x470 <__stack+0x11>
												{
													PORTC&=~(1<<pin);
 45a:	25 b3       	in	r18, 0x15	; 21
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__stack+0x7>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__stack+0x3>
 46a:	80 95       	com	r24
 46c:	82 23       	and	r24, r18
 46e:	85 bb       	out	0x15, r24	; 21
 470:	11 e0       	ldi	r17, 0x01	; 1
												}
							
							status=1;
						}
						
	if(memcmp(inbuf,spibyte,7)==0) 
 472:	c7 01       	movw	r24, r14
 474:	be 01       	movw	r22, r28
 476:	68 5e       	subi	r22, 0xE8	; 232
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	47 e0       	ldi	r20, 0x07	; 7
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	52 d1       	rcall	.+676    	; 0x724 <memcmp>
 480:	00 97       	sbiw	r24, 0x00	; 0
 482:	a9 f4       	brne	.+42     	; 0x4ae <__stack+0x4f>
									{										
										SPDR=strtoul((char*)(inbuf+7),0,16); //преобразуем ASCII в hex
 484:	c7 01       	movw	r24, r14
 486:	07 96       	adiw	r24, 0x07	; 7
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	40 e1       	ldi	r20, 0x10	; 16
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	48 d0       	rcall	.+144    	; 0x522 <strtoul>
 492:	6f b9       	out	0x0f, r22	; 15
										while(!(SPSR & (1<<SPIF))); //ожидаем окончание передачи байта
 494:	77 9b       	sbis	0x0e, 7	; 14
 496:	fe cf       	rjmp	.-4      	; 0x494 <__stack+0x35>
										send_string(answer);
 498:	ce 01       	movw	r24, r28
 49a:	ca 96       	adiw	r24, 0x3a	; 58
 49c:	e7 de       	rcall	.-562    	; 0x26c <send_string>
										UDR=SPDR;
 49e:	8f b1       	in	r24, 0x0f	; 15
 4a0:	8c b9       	out	0x0c, r24	; 12
										while(!(UCSRA&(1<<UDRE))); //ожидаем окончание передачи байта
 4a2:	5d 9b       	sbis	0x0b, 5	; 11
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <__stack+0x43>
										send_string(rn);
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	e0 de       	rcall	.-576    	; 0x26c <send_string>
 4ac:	11 e0       	ldi	r17, 0x01	; 1
										status=1;
									}
	
	if(memcmp(inbuf,spibuff,7)==0) 
 4ae:	c7 01       	movw	r24, r14
 4b0:	be 01       	movw	r22, r28
 4b2:	60 5e       	subi	r22, 0xE0	; 224
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	47 e0       	ldi	r20, 0x07	; 7
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	34 d1       	rcall	.+616    	; 0x724 <memcmp>
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	39 f4       	brne	.+14     	; 0x4ce <__stack+0x6f>
									{
										spi_send_buffer(spitx,32); 
 4c0:	ce 01       	movw	r24, r28
 4c2:	89 5b       	subi	r24, 0xB9	; 185
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	60 e2       	ldi	r22, 0x20	; 32
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	bd de       	rcall	.-646    	; 0x246 <spi_send_buffer>
 4cc:	11 e0       	ldi	r17, 0x01	; 1
										status=1;
									}
	
	
	return status;
 4ce:	81 2f       	mov	r24, r17
 4d0:	c9 59       	subi	r28, 0x99	; 153
 4d2:	df 4f       	sbci	r29, 0xFF	; 255
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	cf 91       	pop	r28
 4e0:	df 91       	pop	r29
 4e2:	1f 91       	pop	r17
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	08 95       	ret

000004ea <tim_3x_start>:
#include "timer.h"

void tim_3x_start(void) //функци€ запуска генератора на 3 вывода, основана на таймере 1
{
	TCCR1B|=(1<<CS11); //тактова€ частота таймера 8ћгц/8=1 ћгц
 4ea:	8e b5       	in	r24, 0x2e	; 46
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	8e bd       	out	0x2e, r24	; 46
	OCR1AH = 0x01;		//запись значени€ 1000 в регистр сравнени€
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0xF4; 
 4f4:	84 ef       	ldi	r24, 0xF4	; 244
 4f6:	8a bd       	out	0x2a, r24	; 42
	TIMSK|= (1<<OCIE1A); //разрешение прерывани€ по сравнению
 4f8:	89 b7       	in	r24, 0x39	; 57
 4fa:	80 61       	ori	r24, 0x10	; 16
 4fc:	89 bf       	out	0x39, r24	; 57
}
 4fe:	08 95       	ret

00000500 <tim_pwm_start>:

void tim_pwm_start(void) //‘ункци€ запуска Ў»ћа
{
	TCCR1B|=(1<<CS11);
 500:	8e b5       	in	r24, 0x2e	; 46
 502:	82 60       	ori	r24, 0x02	; 2
 504:	8e bd       	out	0x2e, r24	; 46
	TCCR1A|=(1<<COM1A1)|(1<<WGM10); //на выводе OC1A (PB1) высокий уровень, если TCNT1==OCR1A, восьмибитный Ў»ћ
 506:	8f b5       	in	r24, 0x2f	; 47
 508:	81 68       	ori	r24, 0x81	; 129
 50a:	8f bd       	out	0x2f, r24	; 47
	OCR1A=0x0f;
 50c:	8f e0       	ldi	r24, 0x0F	; 15
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9b bd       	out	0x2b, r25	; 43
 512:	8a bd       	out	0x2a, r24	; 42
}
 514:	08 95       	ret

00000516 <timer_stop>:

void timer_stop(void) //остановка генераторов
{
	TCCR1B=0x00; 
 516:	1e bc       	out	0x2e, r1	; 46
	TCCR1A=0x00;
 518:	1f bc       	out	0x2f, r1	; 47
	TIMSK=0x00; 
 51a:	19 be       	out	0x39, r1	; 57
	OCR1AH = 0x00;
 51c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 51e:	1a bc       	out	0x2a, r1	; 42
}
 520:	08 95       	ret

00000522 <strtoul>:
 522:	a0 e0       	ldi	r26, 0x00	; 0
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e6 e9       	ldi	r30, 0x96	; 150
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	4e c1       	rjmp	.+668    	; 0x7c8 <__prologue_saves__+0x2>
 52c:	ec 01       	movw	r28, r24
 52e:	2b 01       	movw	r4, r22
 530:	6a 01       	movw	r12, r20
 532:	61 15       	cp	r22, r1
 534:	71 05       	cpc	r23, r1
 536:	19 f0       	breq	.+6      	; 0x53e <strtoul+0x1c>
 538:	fb 01       	movw	r30, r22
 53a:	91 83       	std	Z+1, r25	; 0x01
 53c:	80 83       	st	Z, r24
 53e:	c1 14       	cp	r12, r1
 540:	d1 04       	cpc	r13, r1
 542:	49 f0       	breq	.+18     	; 0x556 <strtoul+0x34>
 544:	c6 01       	movw	r24, r12
 546:	02 97       	sbiw	r24, 0x02	; 2
 548:	83 97       	sbiw	r24, 0x23	; 35
 54a:	28 f0       	brcs	.+10     	; 0x556 <strtoul+0x34>
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	d9 c0       	rjmp	.+434    	; 0x708 <strtoul+0x1e6>
 556:	a9 90       	ld	r10, Y+
 558:	8a 2d       	mov	r24, r10
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	db d0       	rcall	.+438    	; 0x714 <isspace>
 55e:	89 2b       	or	r24, r25
 560:	d1 f7       	brne	.-12     	; 0x556 <strtoul+0x34>
 562:	fd e2       	ldi	r31, 0x2D	; 45
 564:	af 16       	cp	r10, r31
 566:	21 f4       	brne	.+8      	; 0x570 <strtoul+0x4e>
 568:	a9 90       	ld	r10, Y+
 56a:	33 24       	eor	r3, r3
 56c:	33 94       	inc	r3
 56e:	05 c0       	rjmp	.+10     	; 0x57a <strtoul+0x58>
 570:	8b e2       	ldi	r24, 0x2B	; 43
 572:	a8 16       	cp	r10, r24
 574:	09 f4       	brne	.+2      	; 0x578 <strtoul+0x56>
 576:	a9 90       	ld	r10, Y+
 578:	33 24       	eor	r3, r3
 57a:	c1 14       	cp	r12, r1
 57c:	d1 04       	cpc	r13, r1
 57e:	21 f0       	breq	.+8      	; 0x588 <strtoul+0x66>
 580:	e0 e1       	ldi	r30, 0x10	; 16
 582:	ce 16       	cp	r12, r30
 584:	d1 04       	cpc	r13, r1
 586:	11 f5       	brne	.+68     	; 0x5cc <strtoul+0xaa>
 588:	f0 e3       	ldi	r31, 0x30	; 48
 58a:	af 16       	cp	r10, r31
 58c:	69 f4       	brne	.+26     	; 0x5a8 <strtoul+0x86>
 58e:	88 81       	ld	r24, Y
 590:	88 37       	cpi	r24, 0x78	; 120
 592:	11 f0       	breq	.+4      	; 0x598 <strtoul+0x76>
 594:	88 35       	cpi	r24, 0x58	; 88
 596:	41 f4       	brne	.+16     	; 0x5a8 <strtoul+0x86>
 598:	a9 80       	ldd	r10, Y+1	; 0x01
 59a:	22 96       	adiw	r28, 0x02	; 2
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	38 2a       	or	r3, r24
 5a0:	20 e1       	ldi	r18, 0x10	; 16
 5a2:	c2 2e       	mov	r12, r18
 5a4:	d1 2c       	mov	r13, r1
 5a6:	12 c0       	rjmp	.+36     	; 0x5cc <strtoul+0xaa>
 5a8:	c1 14       	cp	r12, r1
 5aa:	d1 04       	cpc	r13, r1
 5ac:	79 f4       	brne	.+30     	; 0x5cc <strtoul+0xaa>
 5ae:	e0 e3       	ldi	r30, 0x30	; 48
 5b0:	ae 16       	cp	r10, r30
 5b2:	59 f1       	breq	.+86     	; 0x60a <strtoul+0xe8>
 5b4:	99 e9       	ldi	r25, 0x99	; 153
 5b6:	e9 2e       	mov	r14, r25
 5b8:	99 e9       	ldi	r25, 0x99	; 153
 5ba:	f9 2e       	mov	r15, r25
 5bc:	99 e9       	ldi	r25, 0x99	; 153
 5be:	09 2f       	mov	r16, r25
 5c0:	99 e1       	ldi	r25, 0x19	; 25
 5c2:	19 2f       	mov	r17, r25
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	c8 2e       	mov	r12, r24
 5c8:	d1 2c       	mov	r13, r1
 5ca:	39 c0       	rjmp	.+114    	; 0x63e <strtoul+0x11c>
 5cc:	fa e0       	ldi	r31, 0x0A	; 10
 5ce:	cf 16       	cp	r12, r31
 5d0:	d1 04       	cpc	r13, r1
 5d2:	91 f0       	breq	.+36     	; 0x5f8 <strtoul+0xd6>
 5d4:	80 e1       	ldi	r24, 0x10	; 16
 5d6:	c8 16       	cp	r12, r24
 5d8:	d1 04       	cpc	r13, r1
 5da:	29 f0       	breq	.+10     	; 0x5e6 <strtoul+0xc4>
 5dc:	e8 e0       	ldi	r30, 0x08	; 8
 5de:	ce 16       	cp	r12, r30
 5e0:	d1 04       	cpc	r13, r1
 5e2:	f9 f4       	brne	.+62     	; 0x622 <strtoul+0x100>
 5e4:	15 c0       	rjmp	.+42     	; 0x610 <strtoul+0xee>
 5e6:	bf ef       	ldi	r27, 0xFF	; 255
 5e8:	eb 2e       	mov	r14, r27
 5ea:	bf ef       	ldi	r27, 0xFF	; 255
 5ec:	fb 2e       	mov	r15, r27
 5ee:	bf ef       	ldi	r27, 0xFF	; 255
 5f0:	0b 2f       	mov	r16, r27
 5f2:	bf e0       	ldi	r27, 0x0F	; 15
 5f4:	1b 2f       	mov	r17, r27
 5f6:	23 c0       	rjmp	.+70     	; 0x63e <strtoul+0x11c>
 5f8:	a9 e9       	ldi	r26, 0x99	; 153
 5fa:	ea 2e       	mov	r14, r26
 5fc:	a9 e9       	ldi	r26, 0x99	; 153
 5fe:	fa 2e       	mov	r15, r26
 600:	a9 e9       	ldi	r26, 0x99	; 153
 602:	0a 2f       	mov	r16, r26
 604:	a9 e1       	ldi	r26, 0x19	; 25
 606:	1a 2f       	mov	r17, r26
 608:	1a c0       	rjmp	.+52     	; 0x63e <strtoul+0x11c>
 60a:	f8 e0       	ldi	r31, 0x08	; 8
 60c:	cf 2e       	mov	r12, r31
 60e:	d1 2c       	mov	r13, r1
 610:	ef ef       	ldi	r30, 0xFF	; 255
 612:	ee 2e       	mov	r14, r30
 614:	ef ef       	ldi	r30, 0xFF	; 255
 616:	fe 2e       	mov	r15, r30
 618:	ef ef       	ldi	r30, 0xFF	; 255
 61a:	0e 2f       	mov	r16, r30
 61c:	ef e1       	ldi	r30, 0x1F	; 31
 61e:	1e 2f       	mov	r17, r30
 620:	0e c0       	rjmp	.+28     	; 0x63e <strtoul+0x11c>
 622:	96 01       	movw	r18, r12
 624:	44 27       	eor	r20, r20
 626:	37 fd       	sbrc	r19, 7
 628:	40 95       	com	r20
 62a:	54 2f       	mov	r21, r20
 62c:	6f ef       	ldi	r22, 0xFF	; 255
 62e:	7f ef       	ldi	r23, 0xFF	; 255
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	a6 d0       	rcall	.+332    	; 0x782 <__udivmodsi4>
 636:	c9 01       	movw	r24, r18
 638:	da 01       	movw	r26, r20
 63a:	7c 01       	movw	r14, r24
 63c:	8d 01       	movw	r16, r26
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	36 01       	movw	r6, r12
 64a:	88 24       	eor	r8, r8
 64c:	77 fc       	sbrc	r7, 7
 64e:	80 94       	com	r8
 650:	98 2c       	mov	r9, r8
 652:	70 ed       	ldi	r23, 0xD0	; 208
 654:	b7 2e       	mov	r11, r23
 656:	ba 0c       	add	r11, r10
 658:	f9 e0       	ldi	r31, 0x09	; 9
 65a:	fb 15       	cp	r31, r11
 65c:	70 f4       	brcc	.+28     	; 0x67a <strtoul+0x158>
 65e:	8a 2d       	mov	r24, r10
 660:	81 54       	subi	r24, 0x41	; 65
 662:	8a 31       	cpi	r24, 0x1A	; 26
 664:	18 f4       	brcc	.+6      	; 0x66c <strtoul+0x14a>
 666:	99 ec       	ldi	r25, 0xC9	; 201
 668:	b9 2e       	mov	r11, r25
 66a:	06 c0       	rjmp	.+12     	; 0x678 <strtoul+0x156>
 66c:	8a 2d       	mov	r24, r10
 66e:	81 56       	subi	r24, 0x61	; 97
 670:	8a 31       	cpi	r24, 0x1A	; 26
 672:	40 f5       	brcc	.+80     	; 0x6c4 <strtoul+0x1a2>
 674:	89 ea       	ldi	r24, 0xA9	; 169
 676:	b8 2e       	mov	r11, r24
 678:	ba 0c       	add	r11, r10
 67a:	8b 2d       	mov	r24, r11
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	8c 15       	cp	r24, r12
 680:	9d 05       	cpc	r25, r13
 682:	04 f5       	brge	.+64     	; 0x6c4 <strtoul+0x1a2>
 684:	6f 3f       	cpi	r22, 0xFF	; 255
 686:	e1 f0       	breq	.+56     	; 0x6c0 <strtoul+0x19e>
 688:	e2 16       	cp	r14, r18
 68a:	f3 06       	cpc	r15, r19
 68c:	04 07       	cpc	r16, r20
 68e:	15 07       	cpc	r17, r21
 690:	b0 f0       	brcs	.+44     	; 0x6be <strtoul+0x19c>
 692:	ca 01       	movw	r24, r20
 694:	b9 01       	movw	r22, r18
 696:	a4 01       	movw	r20, r8
 698:	93 01       	movw	r18, r6
 69a:	54 d0       	rcall	.+168    	; 0x744 <__mulsi3>
 69c:	9b 01       	movw	r18, r22
 69e:	ac 01       	movw	r20, r24
 6a0:	8b 2d       	mov	r24, r11
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	28 0f       	add	r18, r24
 6aa:	39 1f       	adc	r19, r25
 6ac:	4a 1f       	adc	r20, r26
 6ae:	5b 1f       	adc	r21, r27
 6b0:	28 17       	cp	r18, r24
 6b2:	39 07       	cpc	r19, r25
 6b4:	4a 07       	cpc	r20, r26
 6b6:	5b 07       	cpc	r21, r27
 6b8:	10 f0       	brcs	.+4      	; 0x6be <strtoul+0x19c>
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <strtoul+0x19e>
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	a9 90       	ld	r10, Y+
 6c2:	c7 cf       	rjmp	.-114    	; 0x652 <strtoul+0x130>
 6c4:	41 14       	cp	r4, r1
 6c6:	51 04       	cpc	r5, r1
 6c8:	51 f0       	breq	.+20     	; 0x6de <strtoul+0x1bc>
 6ca:	66 23       	and	r22, r22
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <strtoul+0x1b0>
 6ce:	21 97       	sbiw	r28, 0x01	; 1
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <strtoul+0x1b6>
 6d2:	31 fe       	sbrs	r3, 1
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <strtoul+0x1bc>
 6d6:	22 97       	sbiw	r28, 0x02	; 2
 6d8:	f2 01       	movw	r30, r4
 6da:	d1 83       	std	Z+1, r29	; 0x01
 6dc:	c0 83       	st	Z, r28
 6de:	30 fe       	sbrs	r3, 0
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <strtoul+0x1ce>
 6e2:	50 95       	com	r21
 6e4:	40 95       	com	r20
 6e6:	30 95       	com	r19
 6e8:	21 95       	neg	r18
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	4f 4f       	sbci	r20, 0xFF	; 255
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	67 ff       	sbrs	r22, 7
 6f2:	0a c0       	rjmp	.+20     	; 0x708 <strtoul+0x1e6>
 6f4:	82 e2       	ldi	r24, 0x22	; 34
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	90 93 05 01 	sts	0x0105, r25
 6fc:	80 93 04 01 	sts	0x0104, r24
 700:	2f ef       	ldi	r18, 0xFF	; 255
 702:	3f ef       	ldi	r19, 0xFF	; 255
 704:	4f ef       	ldi	r20, 0xFF	; 255
 706:	5f ef       	ldi	r21, 0xFF	; 255
 708:	b9 01       	movw	r22, r18
 70a:	ca 01       	movw	r24, r20
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
 710:	e1 e1       	ldi	r30, 0x11	; 17
 712:	76 c0       	rjmp	.+236    	; 0x800 <__epilogue_restores__+0x2>

00000714 <isspace>:
 714:	91 11       	cpse	r25, r1
 716:	13 c0       	rjmp	.+38     	; 0x73e <__ctype_isfalse>
 718:	80 32       	cpi	r24, 0x20	; 32
 71a:	19 f0       	breq	.+6      	; 0x722 <isspace+0xe>
 71c:	89 50       	subi	r24, 0x09	; 9
 71e:	85 50       	subi	r24, 0x05	; 5
 720:	d0 f7       	brcc	.-12     	; 0x716 <isspace+0x2>
 722:	08 95       	ret

00000724 <memcmp>:
 724:	fb 01       	movw	r30, r22
 726:	dc 01       	movw	r26, r24
 728:	04 c0       	rjmp	.+8      	; 0x732 <memcmp+0xe>
 72a:	8d 91       	ld	r24, X+
 72c:	01 90       	ld	r0, Z+
 72e:	80 19       	sub	r24, r0
 730:	21 f4       	brne	.+8      	; 0x73a <memcmp+0x16>
 732:	41 50       	subi	r20, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	c8 f7       	brcc	.-14     	; 0x72a <memcmp+0x6>
 738:	88 1b       	sub	r24, r24
 73a:	99 0b       	sbc	r25, r25
 73c:	08 95       	ret

0000073e <__ctype_isfalse>:
 73e:	99 27       	eor	r25, r25
 740:	88 27       	eor	r24, r24

00000742 <__ctype_istrue>:
 742:	08 95       	ret

00000744 <__mulsi3>:
 744:	62 9f       	mul	r22, r18
 746:	d0 01       	movw	r26, r0
 748:	73 9f       	mul	r23, r19
 74a:	f0 01       	movw	r30, r0
 74c:	82 9f       	mul	r24, r18
 74e:	e0 0d       	add	r30, r0
 750:	f1 1d       	adc	r31, r1
 752:	64 9f       	mul	r22, r20
 754:	e0 0d       	add	r30, r0
 756:	f1 1d       	adc	r31, r1
 758:	92 9f       	mul	r25, r18
 75a:	f0 0d       	add	r31, r0
 75c:	83 9f       	mul	r24, r19
 75e:	f0 0d       	add	r31, r0
 760:	74 9f       	mul	r23, r20
 762:	f0 0d       	add	r31, r0
 764:	65 9f       	mul	r22, r21
 766:	f0 0d       	add	r31, r0
 768:	99 27       	eor	r25, r25
 76a:	72 9f       	mul	r23, r18
 76c:	b0 0d       	add	r27, r0
 76e:	e1 1d       	adc	r30, r1
 770:	f9 1f       	adc	r31, r25
 772:	63 9f       	mul	r22, r19
 774:	b0 0d       	add	r27, r0
 776:	e1 1d       	adc	r30, r1
 778:	f9 1f       	adc	r31, r25
 77a:	bd 01       	movw	r22, r26
 77c:	cf 01       	movw	r24, r30
 77e:	11 24       	eor	r1, r1
 780:	08 95       	ret

00000782 <__udivmodsi4>:
 782:	a1 e2       	ldi	r26, 0x21	; 33
 784:	1a 2e       	mov	r1, r26
 786:	aa 1b       	sub	r26, r26
 788:	bb 1b       	sub	r27, r27
 78a:	fd 01       	movw	r30, r26
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <__udivmodsi4_ep>

0000078e <__udivmodsi4_loop>:
 78e:	aa 1f       	adc	r26, r26
 790:	bb 1f       	adc	r27, r27
 792:	ee 1f       	adc	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	a2 17       	cp	r26, r18
 798:	b3 07       	cpc	r27, r19
 79a:	e4 07       	cpc	r30, r20
 79c:	f5 07       	cpc	r31, r21
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <__udivmodsi4_ep>
 7a0:	a2 1b       	sub	r26, r18
 7a2:	b3 0b       	sbc	r27, r19
 7a4:	e4 0b       	sbc	r30, r20
 7a6:	f5 0b       	sbc	r31, r21

000007a8 <__udivmodsi4_ep>:
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	1a 94       	dec	r1
 7b2:	69 f7       	brne	.-38     	; 0x78e <__udivmodsi4_loop>
 7b4:	60 95       	com	r22
 7b6:	70 95       	com	r23
 7b8:	80 95       	com	r24
 7ba:	90 95       	com	r25
 7bc:	9b 01       	movw	r18, r22
 7be:	ac 01       	movw	r20, r24
 7c0:	bd 01       	movw	r22, r26
 7c2:	cf 01       	movw	r24, r30
 7c4:	08 95       	ret

000007c6 <__prologue_saves__>:
 7c6:	2f 92       	push	r2
 7c8:	3f 92       	push	r3
 7ca:	4f 92       	push	r4
 7cc:	5f 92       	push	r5
 7ce:	6f 92       	push	r6
 7d0:	7f 92       	push	r7
 7d2:	8f 92       	push	r8
 7d4:	9f 92       	push	r9
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
 7ee:	ca 1b       	sub	r28, r26
 7f0:	db 0b       	sbc	r29, r27
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
 7fc:	09 94       	ijmp

000007fe <__epilogue_restores__>:
 7fe:	2a 88       	ldd	r2, Y+18	; 0x12
 800:	39 88       	ldd	r3, Y+17	; 0x11
 802:	48 88       	ldd	r4, Y+16	; 0x10
 804:	5f 84       	ldd	r5, Y+15	; 0x0f
 806:	6e 84       	ldd	r6, Y+14	; 0x0e
 808:	7d 84       	ldd	r7, Y+13	; 0x0d
 80a:	8c 84       	ldd	r8, Y+12	; 0x0c
 80c:	9b 84       	ldd	r9, Y+11	; 0x0b
 80e:	aa 84       	ldd	r10, Y+10	; 0x0a
 810:	b9 84       	ldd	r11, Y+9	; 0x09
 812:	c8 84       	ldd	r12, Y+8	; 0x08
 814:	df 80       	ldd	r13, Y+7	; 0x07
 816:	ee 80       	ldd	r14, Y+6	; 0x06
 818:	fd 80       	ldd	r15, Y+5	; 0x05
 81a:	0c 81       	ldd	r16, Y+4	; 0x04
 81c:	1b 81       	ldd	r17, Y+3	; 0x03
 81e:	aa 81       	ldd	r26, Y+2	; 0x02
 820:	b9 81       	ldd	r27, Y+1	; 0x01
 822:	ce 0f       	add	r28, r30
 824:	d1 1d       	adc	r29, r1
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	ed 01       	movw	r28, r26
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
